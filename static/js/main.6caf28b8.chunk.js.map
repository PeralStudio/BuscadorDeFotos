{"version":3,"sources":["components/Error.js","components/Formulario.js","components/Imagen.js","components/ListadoImagenes.js","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Formulario","guardarBusqueda","useState","termino","guardarTermino","error","guardarError","onSubmit","e","preventDefault","trim","type","placeholder","onChange","target","value","Imagen","imagen","largeImageURL","likes","previewURL","tags","views","src","alt","href","rel","ListadoImagenes","imagenes","map","key","id","App","busqueda","guardarImagenes","paginaactual","guardarPaginaActual","totalpaginas","guardarTotalPaginas","useEffect","a","async","imagenesPorPagina","url","fetch","respuesta","json","resultado","hits","calcularTotalPaginas","Math","ceil","totalHits","document","querySelector","scrollIntoView","behavior","consultarApi","onClick","nuevaPaginaActual","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6caf28b8.chunk.js","sourcesContent":["import React from 'react';\n\nconst Error = ({mensaje}) => {\n    return ( \n         <p className=\"my-3 p-4 text-center alert alert-primary\">{mensaje}</p>\n     );\n}\n \nexport default Error;","import React, { useState } from 'react';\nimport Error from './Error';\n\nconst Formulario = ({guardarBusqueda}) => {\n\n    const [termino, guardarTermino] = useState('');\n    const [error, guardarError] = useState(false);\n\n    const buscarImagenes = e => {\n        e.preventDefault();\n\n        // validar\n        if(termino.trim() === '') {\n            guardarError(true);\n            return;\n        }\n        guardarError(false);\n\n        // enviar el termino de búsqueda hacia el componente principal\n        guardarBusqueda(termino);\n    }\n\n    return ( \n        <form\n            onSubmit={buscarImagenes}\n        >\n            <div className=\"row\">\n                <div className=\"form-group col-md-8\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control form-control-lg\"\n                        placeholder=\"Ejemplo: futbol, café, playa\"\n                        onChange={ e => guardarTermino(e.target.value)}\n                    />\n                </div>\n                <div className=\"form-group col-md-4\">\n                    <input\n                        type=\"submit\"\n                        className=\"btn btn-lg btn-danger btn-block\"\n                        value=\"Buscar\"\n                    />\n                </div>\n            </div>\n\n            { error ? <Error mensaje=\"Agrega un término de búsqueda\" /> : null }\n        </form>\n     );\n}\n \nexport default Formulario;","import React from 'react';\n\nconst Imagen = ({imagen}) => {\n\n    // extraer las variables\n    const { largeImageURL, likes, previewURL, tags, views } = imagen;\n\n    return ( \n        <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\n            <div className=\"card\">\n                <img src={previewURL} alt={tags} className=\"card-img-top\" />\n\n                <div className=\"card-body\">\n                    <p className=\"card-text\">{likes} Me Gusta</p>\n                    <p className=\"card-text\">{views} Vistas</p>\n                </div>\n\n                <div className=\"card-footer\">\n                    <a\n                        href={largeImageURL}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"btn btn-primary btn-block\"\n                    >Ver Imagen</a>\n                </div>\n            </div>\n        </div>\n     );\n}\n \nexport default Imagen;","import React from 'react';\nimport Imagen from './Imagen';\n\nconst ListadoImagenes = ({imagenes}) => {\n    return ( \n        <div className=\"col-12 p-5 row\">\n            {imagenes.map(imagen => (\n                <Imagen \n                    key={imagen.id}\n                    imagen={imagen}\n                />\n            ))}\n        </div>\n    );\n}\n \nexport default ListadoImagenes;","import React, { useState, useEffect } from 'react';\nimport Formulario from './components/Formulario';\nimport ListadoImagenes from './components/ListadoImagenes';\n\nfunction App() {\n\n  // state de la app\n  const [ busqueda, guardarBusqueda ] = useState('');\n  const [ imagenes, guardarImagenes] = useState([]);\n  const [ paginaactual, guardarPaginaActual ] = useState(1);\n  const [ totalpaginas, guardarTotalPaginas] = useState(5);\n\n  useEffect(() => {\n    const consultarApi = async () => {\n        if(busqueda === '' ) return;\n\n        const imagenesPorPagina = 30;\n        const key = '16982192-ff1b7c1993eedefb92f7a3fb3';\n        const url = `https://pixabay.com/api/?key=${key}&q=${busqueda}&per_page=${imagenesPorPagina}&page=${paginaactual}`;\n    \n        const respuesta = await fetch(url);\n        const resultado = await respuesta.json();\n\n        guardarImagenes(resultado.hits);\n\n        // calcular el total de paginas\n        const calcularTotalPaginas = Math.ceil(resultado.totalHits / imagenesPorPagina );\n        guardarTotalPaginas(calcularTotalPaginas);\n\n        // Mover la pantalla hacia arriba\n        const jumbotron = document.querySelector('.jumbotron');\n        jumbotron.scrollIntoView({ behavior: 'smooth' })\n    }\n    consultarApi();\n  }, [busqueda, paginaactual])\n\n  // definir la página anterior\n  const paginaAnterior = () => {\n    const nuevaPaginaActual = paginaactual - 1;\n\n    if(nuevaPaginaActual === 0 ) return;\n\n    guardarPaginaActual(nuevaPaginaActual);\n  }\n\n  // definir la pagina siguiente\n  const paginaSiguiente = () => {\n    const nuevaPaginaActual = paginaactual + 1;\n\n    if(nuevaPaginaActual > totalpaginas ) return;\n\n    guardarPaginaActual(nuevaPaginaActual);\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron\">\n          <p className=\"lead text-center\"><h1>Buscador de Imágenes<br/><br/></h1></p>\n\n          <Formulario \n            guardarBusqueda={guardarBusqueda}\n          />\n      </div>\n\n      <div className=\"row justify-content-center\">\n          <ListadoImagenes \n            imagenes={imagenes}\n          />\n\n          { (paginaactual === 1) ? null : (\n            <button \n                type=\"button\"\n                className=\"bbtn btn-info mr-1\"\n                onClick={paginaAnterior}\n            >&laquo; Anterior </button>\n          ) }\n\n          { (paginaactual === totalpaginas) ? null : (\n            <button \n              type=\"button\"\n              className=\"bbtn btn-info\"\n              onClick={paginaSiguiente}\n            >Siguiente &raquo;</button>\n          ) }\n      </div>\n      <br/><br/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}